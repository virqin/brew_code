#============================================================================
#  Name:
#    xmod_arm.min
#
#  Description:
#    Makefile to build the an xmod downloadable module with gcc-arm
#
# Assumptions:
#   1. The ARM ADS tools are installed in $(ARMHOME)
#   2. The BREW sdk include files are installed in $(BREWDIR)/inc
#   3. BREWDIR is defined, and points to the installed location of the 
#      BREW SDK.  Optionally, you can install your app directories next 
#      to the inc directory of the BREW SDK.
#   4. The variable MODNAME below has be set to the proper base name of the
#      module being built
#
#        Copyright © 2000-2005 QUALCOMM Incorporated.
#               All Rights Reserved.
#            QUALCOMM Proprietary/GTDR
#
#----------------------------------------------------------------------------
#============================================================================

#----------------------------------------------------------------------------
# Target file name and type and path definitions
#----------------------------------------------------------------------------

ifndef MODNAME
$(error MODNAME is undefined!)
endif

#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Software tool and environment definitions
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------

MKDIR=mkdir

#----------------------------------------------------------------------------
# I need ARMHOME
#----------------------------------------------------------------------------

ifndef ARMHOME
$(error ARMHOME is undefined!)
endif

ARMHOME := $(subst \,/,$(ARMHOME))

ARMBIN = "$(ARMHOME)/bin"
ARMINC = "$(ARMHOME)/include/"
ARMLIB = $(ARMHOME)/lib

ARMCC   = $(ARMBIN)/armcc
ARMAR   = $(ARMBIN)/armar
ARMCPP  = $(ARMBIN)/armcpp
TCC     = $(ARMBIN)/tcc
TCPP    = $(ARMBIN)/tcpp
LD      = $(ARMBIN)/armlink
FROMELF = $(ARMBIN)/fromelf

#----------------------------------------------------------------------------
# Target compile time symbol definitions
#----------------------------------------------------------------------------

DEFINES = -DT_ARM $(MYDEFINES)

#----------------------------------------------------------------------------
# Processor architecture options, ARM7TDMI target processor, little endian
#----------------------------------------------------------------------------

CPU = -littleend -cpu ARM7TDMI

#----------------------------------------------------------------------------
# ARM Procedure Call Standard (APCS) options
#----------------------------------------------------------------------------

APCS = -apcs /noswst/inter/ropi/norwpi

#----------------------------------------------------------------------------
# C Compiler options
#----------------------------------------------------------------------------

COPT = -zo -Wbns+a -fa

#----------------------------------------------------------------------------
# Compiler/assembler debug options
#----------------------------------------------------------------------------

DBG =

#----------------------------------------------------------------------------
# Compiler optimization options, full compiler optimization for space
#----------------------------------------------------------------------------

OPT = -Otime --no_inlinemax -O2

#----------------------------------------------------------------------------
# Include file search path options
#----------------------------------------------------------------------------

INC = -I$(XMODDIR) $(MODINC) 

#----------------------------------------------------------------------------
# Compiler flag definitions
#----------------------------------------------------------------------------

CFLAGS = -ansic $(CPU) $(APCS) $(COPT) $(DBG) $(OPT) $(DEFINES) $(INC) $(MODCFLAGS)
CPPFLAGS = -cpp $(CPU) $(APCS) $(COPT) $(DBG) $(OPT) $(DEFINES) $(INC) $(MODCFLAGS)

#----------------------------------------------------------------------------
# Linker options
#----------------------------------------------------------------------------

LFLAGS = -remove -ropi -rwpi -rw-base 0 -strict -entry AEEMod_Load -first AEEMod_Load $(MODLFLAGS)

#----------------------------------------------------------------------------
#  define what goes into target
#----------------------------------------------------------------------------

OBJS = $(notdir $(MODOBJS) xmodstub.o xmodimpl.o)

MODOBJ=modobjs
LIBOBJ=libobjs

OBJDIR=$(MODOBJ)
ifdef STATIC
  OBJDIR=$(LIBOBJ)
  DEFINES += -DAEE_STATIC
endif
 
OBJS := $(addprefix $(OBJDIR)/,$(OBJS))

LIBS = $(MODLIBS)

#----------------------------------------------------------------------------
# Default target
#----------------------------------------------------------------------------

all : $(MODNAME).mod $(MODNAME)_arm.lib

#----------------------------------------------------------------------------
# Clean target
#----------------------------------------------------------------------------

# The object subdirectory, target image file, and target hex file are deleted.

clean :
	@echo ---------------------------------------------------------------
	@echo CLEAN
	-rm -rf $(LIBOBJ)
	-rm -rf $(MODOBJ)
	-rm -f $(MODNAME).lib
	-rm -f $(MODNAME).elf
	-rm -f $(MODNAME).mod
	$(XMOD_CLEAN_CMDS)
	@echo ---------------------------------------------------------------

#============================================================================
#                           DEFAULT SUFFIX RULES
#============================================================================

# The following are the default suffix rules used to compile all objects that
# are not specifically included in one of the module specific rules defined
# in the next section.

# The following macros are used to specify the output object file, MSG_FILE
# symbol definition and input source file on the compile line in the rules
# defined below.

.SUFFIXES :
.SUFFIXES : .o .c .cpp

VPATH = $(XMODDIR):$(MODVPATH)

#----------------------------------------------------------------------------
# C RULES
#----------------------------------------------------------------------------

$(OBJDIR)/%.o: %.c
	@echo ---------------------------------------------------------------
	@echo OBJECT $@
	@if [ ! -d $(OBJDIR) ] ; \
		then $(MKDIR) $(OBJDIR) ; \
	fi
	$(TCC) $(CFLAGS) -o $@ -c $(subst \,/,$<)
	$(XMOD_POSTCC_CMDS)
	@echo ---------------------------------------------------------------

$(OBJDIR)/%.o: %.cpp
	@echo ---------------------------------------------------------------
	@echo OBJECT $@
	@if [ ! -d $(OBJDIR) ] ; \
		then $(MKDIR) $(OBJDIR) ; \
	fi
	$(TCPP) $(CFLAGS) -o $@ -c $<
	$(XMOD_POSTCC_CMDS)
	@echo ---------------------------------------------------------------

# build xmodstub in ARM mode
$(OBJDIR)/xmodstub.o: xmodstub.c
	@echo ---------------------------------------------------------------
	@echo OBJECT $@
	@if [ ! -d $(OBJDIR) ] ; \
		then $(MKDIR) $(OBJDIR) ; \
	fi
	$(ARMCC) $(CFLAGS) -o $@ -c $(subst \,/,$<)
	@echo ---------------------------------------------------------------


#============================================================================
#                              MODULE RULES
#============================================================================

$(MODNAME).mod : $(MODNAME).elf
	@echo ---------------------------------------------------------------
	@echo ELF $@
	$(FROMELF) -bin -o $@ $<

$(MODNAME).elf : $(OBJS)
	@echo ---------------------------------------------------------------
	@echo BREW MODULE $@
	$(LD) -o $@ $(LFLAGS) $(OBJS)
	$(XMOD_POSTELF_CMDS)	

$(MODNAME).a: $(OBJS)
	@echo ---------------------------------------------------------------
	@echo BREW ARCHIVE $@
	$(ARMAR) -r $@ $(OBJS)

ifndef BREWPK
$(MODNAME)_arm.lib:
	@echo ---------------------------------------------------------------
	@echo BREW LIB $@
	@echo Note: Library build skipped: BREWPK is not defined
else
$(MODNAME)_arm.lib: $(OBJS)
	@echo ---------------------------------------------------------------
	@echo BREW LIB $@
	$(ARMAR) -r $@ $(OBJS)
endif

