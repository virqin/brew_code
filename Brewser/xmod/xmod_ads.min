#============================================================================
#  Name:
#    xmod_ads.min
#
#  Description:
#    Makefile to build the an xmod downloadable module with ADS 1.x
#
#   The following nmake targets are available in this makefile:
#
#     all           - make .elf and .mod image files (default)
#     clean         - delete object directory and image files
#     filename.o    - make object file
#
#   The above targets can be made with the following command:
#
#     nmake /f xmod_ads.mak [target]
#
# Assumptions:
#   1. The ARM ADS tools are installed in $(ARMHOME)
#   2. The BREW sdk include files are installed in $(BREWSDKDIR)/inc
#   3. BREWDIR is defined, and points to the installed location of the 
#      BREW SDK.  Optionally, you can install your app directories next 
#      to the inc directory of the BREW SDK.
#   4. The variable MODNAME below has be set to the proper base name of the
#      module being built
#
#        Copyright © 2000-2001 QUALCOMM Incorporated.
#               All Rights Reserved.
#            QUALCOMM Proprietary/GTDR
#
#----------------------------------------------------------------------------
#============================================================================

#----------------------------------------------------------------------------
# Target file name and type and path definitions
#----------------------------------------------------------------------------
!IFNDEF MODNAME
!MESSAGE MODNAME is undefined.  Please define the variable MODNAME, which will 
!MESSAGE   be used to create MODNAME.mod
!MESSAGE
!ERROR Please define MODNAME!
!ENDIF

!MESSAGE Using "$(BREWDIR)" for BREWDIR
!MESSAGE

MODSUPPDIR  = ..\modsupport

#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Software tool and environment definitions
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# I need ARMHOME
#----------------------------------------------------------------------------

!IFNDEF ARMHOME
!MESSAGE   ARMHOME must be defined (either passed as an argument or set in the 
!MESSAGE   shell's environment).  It should be set to the location of your ADS 
!MESSAGE   installation directory (with Bin, Include & Lib subdirectories).
!MESSAGE   
!ERROR    ARMHOME is undefined!
!ENDIF

ARMBIN = $(ARMHOME)\Bin         # ARM ADS application directory
ARMINC = $(ARMHOME)\Include     # ARM ADS include file directory
ARMLIB = $(ARMHOME)\Lib         # ARM ADS library directory

ARMCC   = "$(ARMBIN)\armcc"     # ARM ADS 32-bit ISA C compiler
ARMCPP  = "$(ARMBIN)\armcpp"    # ARM ADS 32-bit ISA C++ compiler
TCC     = "$(ARMBIN)\tcc"       # ARM ADS 16-bit ISA (thumb) C compiler
TCPP    = "$(ARMBIN)\tcpp"      # ARM ADS 16-bit ISA (thumb) C++ compiler
LD      = "$(ARMBIN)\armlink"   # ARM ADS linker
FROMELF = "$(ARMBIN)\fromelf"   # ARM ADS utility to stip elf


#----------------------------------------------------------------------------
# Target compile time symbol definitions
#----------------------------------------------------------------------------

DEFINES = 

#----------------------------------------------------------------------------
# Processor architecture options
#----------------------------------------------------------------------------

CPU = -littleend -cpu ARM7TDMI # ARM7TDMI target processor, little endian

#----------------------------------------------------------------------------
# ARM Procedure Call Standard (APCS) options
#----------------------------------------------------------------------------

APCS = -apcs /noswst/inter/ropi/norwpi

#----------------------------------------------------------------------------
# C Compiler options
#----------------------------------------------------------------------------

COPT = -zo -Wbns+a -fa

#----------------------------------------------------------------------------
# Compiler/assembler debug options
#----------------------------------------------------------------------------

#DBG = -g                        # Enable debug
DBG =                            # No debug

#----------------------------------------------------------------------------
# Compiler optimization options
#----------------------------------------------------------------------------

OPT = -Ospace -O2              # Full compiler optimization for space
#OPT = -Otime -O2               # Full compiler optimization for time
#OPT = -O0                      # No optimization at all

#----------------------------------------------------------------------------
# Include file search path options
#----------------------------------------------------------------------------

INC = $(MODINC) -I"$(BREWDIR)\inc" -I..\..\inc -I$(XMODDIR) 

#----------------------------------------------------------------------------
# Compiler flag definitions
#----------------------------------------------------------------------------

CFLAGS = $(CPU) $(APCS) $(COPT) $(DBG) $(OPT) $(DEFINES) $(INC) $(MODCFLAGS)

#----------------------------------------------------------------------------
# Linker options
#----------------------------------------------------------------------------

LFLAGS = -remove -ropi -rwpi -rw-base 0 -strict -entry AEEMod_Load -first AEEMod_Load $(MODLFLAGS)

#----------------------------------------------------------------------------
#  define what goes into target
#----------------------------------------------------------------------------

OBJS = $(MODOBJS) \
        xmodstub.o \
        xmodimpl.o \

LIBS = $(MODLIBS)

#----------------------------------------------------------------------------
# Default target
#----------------------------------------------------------------------------

all : $(MODNAME).mod  # the target app

#----------------------------------------------------------------------------
# Clean target
#----------------------------------------------------------------------------

# The object subdirectory, target image file, and target hex file are deleted.

clean :
        @echo ---------------------------------------------------------------
        @echo CLEAN
        -del /f $(OBJS)
        -del /f $(MODNAME).elf
        -del /f $(MODNAME).mod
        @echo ---------------------------------------------------------------

#============================================================================
#                           DEFAULT SUFFIX RULES
#============================================================================

# The following are the default suffix rules used to compile all objects that
# are not specifically included in one of the module specific rules defined
# in the next section.

# The following macros are used to specify the output object file, MSG_FILE
# symbol definition and input source file on the compile line in the rules
# defined below.

.SUFFIXES :
.SUFFIXES : .o .c .cpp

#----------------------------------------------------------------------------
# C code inference rules
#----------------------------------------------------------------------------

.c.o:
        @echo ---------------------------------------------------------------
        @echo OBJECT $<
        $(TCC) -ansic -c $(CFLAGS) -o $@ $<
        @echo ---------------------------------------------------------------

.cpp.o:
        @echo ---------------------------------------------------------------
        @echo OBJECT $<
        $(TCPP) -cpp -c $(CFLAGS) -o $@ $<
        @echo ---------------------------------------------------------------

{$(XMODDIR)}.c.o:
        @echo ---------------------------------------------------------------
        @echo OBJECT $<
        $(TCC) -ansic -c $(CFLAGS) -o $@ $<
        @echo ---------------------------------------------------------------

# build xmodstub in ARM mode
xmodstub.o: $(XMODDIR)\xmodstub.c
        @echo ---------------------------------------------------------------
        @echo OBJECT $(XMODDIR)\xmodstub.c
        $(ARMCC) -ansic -c $(CFLAGS) -o xmodstub.o $(XMODDIR)\xmodstub.c
        @echo ---------------------------------------------------------------

# rules for thrdutil...
{"$(BREWDIR)"\src\thrdutil}.c.o:
        @echo ---------------------------------------------------------------
        @echo OBJECT $<
        $(TCC) -ansic -c $(CFLAGS) -o $@ $<
        @echo ---------------------------------------------------------------

#============================================================================
#                           MODULE SPECIFIC RULES
#============================================================================


#----------------------------------------------------------------------------
# Target rules
#----------------------------------------------------------------------------

$(MODNAME).mod : $(MODNAME).elf
        @echo ---------------------------------------------------------------
        @echo ELF $@
        $(FROMELF) -bin -o $@ $(MODNAME).elf

$(MODNAME).elf : $(OBJS)
        @echo ---------------------------------------------------------------
        @echo BREWMOD $@
        $(LD) -o $@ $(LFLAGS) $(OBJS) $(LIBS)

# ------------
# DEPENDENCIES

$(TARGET).o : $(TARGET).c
