#============================================================================
#  Name:
#    xmod_arm.min
#
#  Description:
#    Makefile to build the an xmod downloadable module with gcc-arm
#
# Assumptions:
#   1. The ARM ADS tools are installed in $(ARMHOME)
#   2. The BREW sdk include files are installed in $(BREWDIR)/inc
#   3. BREWDIR is defined, and points to the installed location of the 
#      BREW SDK.  Optionally, you can install your app directories next 
#      to the inc directory of the BREW SDK.
#   4. The variable MODNAME below has be set to the proper base name of the
#      module being built
#
#        Copyright © 2000-2001 QUALCOMM Incorporated.
#               All Rights Reserved.
#            QUALCOMM Proprietary/GTDR
#
#----------------------------------------------------------------------------
#============================================================================

#----------------------------------------------------------------------------
# Target file name and type and path definitions
#----------------------------------------------------------------------------

ifndef MODNAME
$(error Please define MODNAME!)
endif

#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Software tool and environment definitions
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# I need ARMHOME
#----------------------------------------------------------------------------

ifndef ARMHOME
$(error ARMHOME is undefined!)
endif

ARMHOME := $(subst \,/,$(ARMHOME))

ARMCC   = $(ARMHOME)/Bin/armcc
ARMCPP  = $(ARMHOME)/Bin/armcpp
TCC     = $(ARMHOME)/Bin/tcc
TCPP    = $(ARMHOME)/Bin/tcpp
LD      = $(ARMHOME)/Bin/armlink
FROMELF = $(ARMHOME)/Bin/fromelf

#----------------------------------------------------------------------------
# Target compile time symbol definitions
#----------------------------------------------------------------------------

DEFINES = -DT_ARM

#----------------------------------------------------------------------------
# Processor architecture options, ARM7TDMI target processor, little endian
#----------------------------------------------------------------------------

CPU = -littleend -cpu ARM7TDMI

#----------------------------------------------------------------------------
# ARM Procedure Call Standard (APCS) options
#----------------------------------------------------------------------------

APCS = -apcs /noswst/inter/ropi/norwpi

#----------------------------------------------------------------------------
# C Compiler options
#----------------------------------------------------------------------------

COPT = -zo -Wbns+a -fa

#----------------------------------------------------------------------------
# Compiler/assembler debug options
#----------------------------------------------------------------------------

DBG =

#----------------------------------------------------------------------------
# Compiler optimization options, full compiler optimization for space
#----------------------------------------------------------------------------

OPT = -Ospace -O2

#----------------------------------------------------------------------------
# Include file search path options
#----------------------------------------------------------------------------

INC = $(MODINC) -I"$(BREWDIR)/inc" -I../../inc -I$(XMODDIR)

#----------------------------------------------------------------------------
# Compiler flag definitions
#----------------------------------------------------------------------------

CFLAGS = -ansic $(CPU) $(APCS) $(COPT) $(DBG) $(OPT) $(DEFINES) $(INC) $(MODCFLAGS)
CPPFLAGS = -cpp $(CPU) $(APCS) $(COPT) $(DBG) $(OPT) $(DEFINES) $(INC) $(MODCFLAGS)

#----------------------------------------------------------------------------
# Linker options
#----------------------------------------------------------------------------

LFLAGS = -remove -ropi -rwpi -rw-base 0 -strict -entry AEEMod_Load -first AEEMod_Load $(MODLFLAGS)

#----------------------------------------------------------------------------
#  define what goes into target
#----------------------------------------------------------------------------

OBJS = $(MODOBJS) \
        xmodstub.o \
        xmodimpl.o \

LIBS = $(MODLIBS)

#----------------------------------------------------------------------------
# Default target
#----------------------------------------------------------------------------

all : $(MODNAME).mod

#----------------------------------------------------------------------------
# Clean target
#----------------------------------------------------------------------------

# The object subdirectory, target image file, and target hex file are deleted.

clean :
	@echo ---------------------------------------------------------------
	@echo CLEAN
	-rm -f $(OBJS)
	-rm -f $(MODNAME).elf
	-rm -f $(MODNAME).mod
	@echo ---------------------------------------------------------------

#============================================================================
#                           DEFAULT SUFFIX RULES
#============================================================================

# The following are the default suffix rules used to compile all objects that
# are not specifically included in one of the module specific rules defined
# in the next section.

# The following macros are used to specify the output object file, MSG_FILE
# symbol definition and input source file on the compile line in the rules
# defined below.

.SUFFIXES :
.SUFFIXES : .o .c .cpp

VPATH = $(XMODDIR):"$(BREWDIR)/src/thrdutil"

#----------------------------------------------------------------------------
# C RULES
#----------------------------------------------------------------------------

.c.o:
	@echo ---------------------------------------------------------------
	@echo OBJECT $@
	$(TCC) $(CFLAGS) -o $@ -c $<
	@echo ---------------------------------------------------------------

.cpp.o:
	@echo ---------------------------------------------------------------
	@echo OBJECT $@
	$(TCPP) $(CFLAGS) -o $@ -c $<
	@echo ---------------------------------------------------------------

# build xmodstub in ARM mode
xmodstub.o: xmodstub.c
	@echo ---------------------------------------------------------------
	@echo OBJECT $@
	$(ARMCC) $(CFLAGS) -o $@ -c $<
	@echo ---------------------------------------------------------------


#============================================================================
#                              MODULE RULES
#============================================================================

$(MODNAME).mod : $(MODNAME).elf
	@echo ---------------------------------------------------------------
	@echo ELF $@
	$(FROMELF) -bin -o $@ $<

$(MODNAME).elf : $(OBJS)
	@echo ---------------------------------------------------------------
	@echo BREW MODULE $@
	$(LD) -o $@ $(LFLAGS) $(OBJS) $(LIBS)
