/*===========================================================================

FILE: mymedia.c
===========================================================================*/


/*===============================================================================
INCLUDES AND VARIABLE DEFINITIONS
=============================================================================== */
#include "AEEModGen.h"          // Module interface definitions
#include "AEEAppGen.h"          // Applet interface definitions
#include "AEEShell.h"           // Shell interface definitions
#include "AEEMenu.h"
#include "AEEStdLib.h"
#include "AEEImage.h"

//lab 1
#include "AEEMedia.h"
//end of lab 1

#include "mymedia.bid"
#include "mymedia_res.h"


/*-------------------------------------------------------------------
Applet structure. All variables in here are reference via "pMe->"
-------------------------------------------------------------------*/
// create an applet structure that's passed around. All variables in
// here will be able to be referenced as static.
typedef struct _mymedia {
	AEEApplet		a ;	       // First element of this structure must be AEEApplet
    AEEDeviceInfo	DeviceInfo; // always have access to the hardware device information
    IDisplay		*pIDisplay;  // give a standard way to access the Display interface
    IShell			*pIShell;    // give a standard way to access the Shell interface
	IMenuCtl		*pMenu;
	IStatic			*pAbout;
	IStatic			*pHelp;
	IImage			*pImage;

	//lab 1
	IMedia			*pMedia;
	int				flag; // whether to replay the music
	int				TickTime; // record the tick numbers in order to play the music at the breakpoint 
	//end of lab 1
	
	uint16			status;
} mymedia;


// defination for the menu items
#define ID_ENTER 1
#define ID_HELP  2
#define ID_ABOUT 3

// defination for the different pages
#define STATUS_MAINMENU  4
#define STATUS_ABOUT     5
#define STATUS_HELP      6
#define STATUS_ENTER     7


/*-------------------------------------------------------------------
Function Prototypes
-------------------------------------------------------------------*/
static  boolean mymedia_HandleEvent(mymedia* pMe, 
                                                   AEEEvent eCode, uint16 wParam, 
                                                   uint32 dwParam);
boolean mymedia_InitAppData(mymedia* pMe);
void    mymedia_FreeAppData(mymedia* pMe);

static void BuildMainMenu(mymedia* pMe);
static void DisplayAbout(mymedia* pMe);
static void DisplayHelp(mymedia* pMe);
static void DisplayDog(mymedia* pMe);
static void PlayImage(mymedia* pMe);
static void PlayMusic(mymedia* pMe);
static void MediaCallback(mymedia* pMe,AEEMediaCmdNotify *data);


/*===============================================================================
FUNCTION DEFINITIONS
=============================================================================== */

/*===========================================================================
FUNCTION: AEEClsCreateInstance

DESCRIPTION
	This function is invoked while the app is being loaded. All Modules must provide this 
	function. Ensure to retain the same name and parameters for this function.
	In here, the module must verify the ClassID and then invoke the AEEApplet_New() function
	that has been provided in AEEAppGen.c. 

   After invoking AEEApplet_New(), this function can do app specific initialization. In this
   example, a generic structure is provided so that app developers need not change app specific
   initialization section every time except for a call to IDisplay_InitAppData(). 
   This is done as follows: InitAppData() is called to initialize AppletData 
   instance. It is app developers responsibility to fill-in app data initialization 
   code of InitAppData(). App developer is also responsible to release memory 
   allocated for data contained in AppletData -- this can be done in 
   IDisplay_FreeAppData().

PROTOTYPE:
   int AEEClsCreateInstance(AEECLSID ClsId,IShell * pIShell,IModule * po,void ** ppObj)

PARAMETERS:
	clsID: [in]: Specifies the ClassID of the applet which is being loaded

	pIShell: [in]: Contains pointer to the IShell object. 

	pIModule: pin]: Contains pointer to the IModule object to the current module to which
	this app belongs

	ppObj: [out]: On return, *ppObj must point to a valid IApplet structure. Allocation
	of memory for this structure and initializing the base data members is done by AEEApplet_New().

DEPENDENCIES
  none

RETURN VALUE
  AEE_SUCCESS: If the app needs to be loaded and if AEEApplet_New() invocation was
     successful
  EFAILED: If the app does not need to be loaded or if errors occurred in 
     AEEApplet_New(). If this function returns FALSE, the app will not be loaded.

SIDE EFFECTS
  none
===========================================================================*/
int AEEClsCreateInstance(AEECLSID ClsId, IShell *pIShell, IModule *po, void **ppObj)
{
	*ppObj = NULL;

	if( ClsId == AEECLSID_MYMEDIA )
	{
		// Create the applet and make room for the applet structure
		if( AEEApplet_New(sizeof(mymedia),
                          ClsId,
                          pIShell,
                          po,
                          (IApplet**)ppObj,
                          (AEEHANDLER)mymedia_HandleEvent,
                          (PFNFREEAPPDATA)mymedia_FreeAppData) ) // the FreeAppData function is called after sending EVT_APP_STOP to the HandleEvent function
                          
		{
			//Initialize applet data, this is called before sending EVT_APP_START
            // to the HandleEvent function
			if(mymedia_InitAppData((mymedia*)*ppObj))
			{
				//Data initialized successfully
				return(AEE_SUCCESS);
			}
			else
			{
				//Release the applet. This will free the memory allocated for the applet when
				// AEEApplet_New was called.
				IAPPLET_Release((IApplet*)*ppObj);
				return EFAILED;
			}

        } // end AEEApplet_New

    }

	return(EFAILED);
}


/*===========================================================================
FUNCTION SampleAppWizard_HandleEvent

DESCRIPTION
	This is the EventHandler for this app. All events to this app are handled in this
	function. All APPs must supply an Event Handler.

PROTOTYPE:
	boolean SampleAppWizard_HandleEvent(IApplet * pi, AEEEvent eCode, uint16 wParam, uint32 dwParam)

PARAMETERS:
	pi: Pointer to the AEEApplet structure. This structure contains information specific
	to this applet. It was initialized during the AEEClsCreateInstance() function.

	ecode: Specifies the Event sent to this applet

   wParam, dwParam: Event specific data.

DEPENDENCIES
  none

RETURN VALUE
  TRUE: If the app has processed the event
  FALSE: If the app did not process the event

SIDE EFFECTS
  none
===========================================================================*/
static boolean mymedia_HandleEvent(mymedia* pMe, AEEEvent eCode, uint16 wParam, uint32 dwParam)
{  
	uint16        item;

	if(pMe->pMenu && IMENUCTL_HandleEvent(pMe->pMenu,eCode,wParam,dwParam) )
		return TRUE;

    switch (eCode) 
	{
        // App is told it is starting up
        case EVT_APP_START:                        
		    
			BuildMainMenu(pMe);
            return(TRUE);

		// App is told it is exiting
        case EVT_APP_STOP:
            // Add your code here...

      		return(TRUE);


        // App is being suspended 
        case EVT_APP_SUSPEND:
		  switch(pMe->status)
		  {
		  case STATUS_MAINMENU:
		      IMENUCTL_Release(pMe->pMenu);
			  pMe->pMenu = NULL;
			  break;
		  case STATUS_ABOUT:
			  ISTATIC_Release(pMe->pAbout);
			  pMe->pAbout = NULL;
			  break;
		  case STATUS_HELP:
			  ISTATIC_Release(pMe->pHelp);
			  pMe->pHelp = NULL;
			  break;
		  case STATUS_ENTER:
			  IIMAGE_Release(pMe->pImage);
			  pMe->pImage = NULL;

		  }
		  return TRUE;

        // App is being resumed
        case EVT_APP_RESUME:
		  switch(pMe->status)
		  {
		  case STATUS_MAINMENU:
			  BuildMainMenu(pMe);
			  break;
		  case STATUS_ABOUT:
			  DisplayAbout(pMe);
			  break;
		  case STATUS_HELP:
			  DisplayHelp(pMe);
			  break;
		  case STATUS_ENTER:
			  PlayImage(pMe);
			  break;
		  }
		  return TRUE;

        // A key was pressed. Look at the wParam above to see which key was pressed. The key
        // codes are in AEEVCodes.h. Example "AVK_1" means that the "1" key was pressed.
        case EVT_KEY:
		  //When the user press clear key and the current page is not the main menu, it should be returned to the main menu.
		  if((wParam == AVK_CLR) && (pMe->status != STATUS_MAINMENU)) 
		  {
			  if(pMe->pAbout)
			  {
				  ISTATIC_Release(pMe->pAbout);
				  pMe->pAbout = NULL;
			  }

			  if(pMe->pHelp)
			  {
				  ISTATIC_Release(pMe->pHelp);
				  pMe->pHelp = NULL;
			  }

			  if(pMe->pImage)
			  {
				  IIMAGE_Stop(pMe->pImage);
				  IIMAGE_Release(pMe->pImage);
				  pMe->pImage = NULL;
				  //lab 2
				  IMEDIA_Stop(pMe->pMedia);
				  IMEDIA_Release(pMe->pMedia);
				  pMe->pMedia = NULL;
				  pMe->flag = 1;   // do not replay the music 
				  // end of lab 2
			  }
			  
			  IMENUCTL_Redraw(pMe->pMenu);
			  IMENUCTL_SetActive(pMe->pMenu,TRUE);
			  pMe->status = STATUS_MAINMENU;
			  return TRUE;
		  }
		  else //When the user press clear key and the current page is main menu, the application should exit.
			  return FALSE;

		case EVT_COMMAND:
		  if(IMENUCTL_IsActive(pMe->pMenu))
		  {
			  item = IMENUCTL_GetSel (pMe->pMenu);
			  switch(item)
			  {
			  case ID_ENTER:  // Display the running dog on the screen with the music
				  DisplayDog(pMe);
				  break;
			  case ID_HELP:
				  DisplayHelp(pMe);
				  break;
			  case ID_ABOUT:  // Display the information about this application
				  DisplayAbout(pMe);
				  break;
			  default:
				  break;
			  }
			  return TRUE;
		  }
		  else 
			  return FALSE;
		  
        // If nothing fits up to this point then we'll just break out
        default:
            break;
   }

   return FALSE;
}


// this function is called when your application is starting up
boolean mymedia_InitAppData(mymedia* pMe)
{
    // Get the device information for this handset.
    // Reference all the data by looking at the pMe->DeviceInfo structure
    // Check the API reference guide for all the handy device info you can get
    pMe->DeviceInfo.wStructSize = sizeof(pMe->DeviceInfo);
    ISHELL_GetDeviceInfo(pMe->a.m_pIShell,&pMe->DeviceInfo);

    // The display and shell interfaces are always created by
    // default, so we'll asign them so that you can access
    // them via the standard "pMe->" without the "a."
    pMe->pIDisplay = pMe->a.m_pIDisplay;
    pMe->pIShell   = pMe->a.m_pIShell;

	pMe->status = 0;
	pMe->pMenu = NULL;
	pMe->pAbout = NULL;
	pMe->pHelp = NULL;
	pMe->pImage = NULL;
	// lab 1
	pMe->pMedia = NULL;
	// end of lab 1


    // if there have been no failures up to this point then return success
    return TRUE;
}

// this function is called when your application is exiting
void mymedia_FreeAppData(mymedia* pMe)
{
	if(pMe->pMenu)
		IMENUCTL_Release(pMe->pMenu);
	if(pMe->pAbout)
		ISTATIC_Release(pMe->pAbout);
	if(pMe->pHelp)
		ISTATIC_Release(pMe->pHelp);
	if(pMe->pImage)
		IIMAGE_Release(pMe->pImage);
	// lab 1
	if(pMe->pMedia)
		IMEDIA_Release(pMe->pMedia);
	// end of lab 1
}

static void BuildMainMenu(mymedia* pMe)
{
	if(ISHELL_CreateInstance(pMe->pIShell,AEECLSID_MENUCTL,(void**)&pMe->pMenu) != SUCCESS)
		return ;

	IMENUCTL_SetTitle(pMe->pMenu,MYMEDIA_RES_FILE,IDS_TITLE,NULL);

	IMENUCTL_AddItem(pMe->pMenu,MYMEDIA_RES_FILE,IDS_ENTER,ID_ENTER,NULL,0);
	IMENUCTL_AddItem(pMe->pMenu,MYMEDIA_RES_FILE,IDS_HELP,ID_HELP,NULL,0);
	IMENUCTL_AddItem(pMe->pMenu,MYMEDIA_RES_FILE,IDS_ABOUT,ID_ABOUT,NULL,0);

	IMENUCTL_SetActive(pMe->pMenu,TRUE);
	pMe->status = STATUS_MAINMENU;
}

static void DisplayDog(mymedia* pMe)
{
	pMe->status = STATUS_ENTER;
	IMENUCTL_SetActive(pMe->pMenu,FALSE);

// lab 2
	pMe->flag = 0;
	pMe->TickTime = 0;
	PlayMusic(pMe);
// end of lab 2

	PlayImage(pMe);
}

static void DisplayAbout(mymedia* pMe)
{
	AEERect       rect;
    AECHAR        title[12];
	AECHAR        data[80];

	pMe->status = STATUS_ABOUT;
	IMENUCTL_SetActive(pMe->pMenu,FALSE);
	IDISPLAY_ClearScreen(pMe->pIDisplay );
	if(!pMe->pAbout)
	{
		if(ISHELL_CreateInstance(pMe->pIShell,AEECLSID_STATIC,(void**)&pMe->pAbout) != SUCCESS)
			return ;
	}
	SETAEERECT(&rect,0,0,pMe->DeviceInfo.cxScreen,pMe->DeviceInfo.cyScreen);
    ISTATIC_SetRect(pMe->pAbout,&rect);

	ISHELL_LoadResString(pMe->pIShell,MYMEDIA_RES_FILE,IDS_ABOUT,title,sizeof(title));
	ISHELL_LoadResString(pMe->pIShell,MYMEDIA_RES_FILE,IDS_ABOUT_DATA,data,sizeof(data));
	ISTATIC_SetText(pMe->pAbout,title,data,AEE_FONT_BOLD,AEE_FONT_NORMAL);
	ISTATIC_SetActive(pMe->pAbout,TRUE);
	ISTATIC_Redraw(pMe->pAbout);
}

static void DisplayHelp(mymedia* pMe)
{
	AEERect       rect;
	AECHAR        title[24];
	IImage        *pImage;

	IMENUCTL_SetActive(pMe->pMenu,FALSE);
	IDISPLAY_ClearScreen(pMe->pIDisplay );
	if(!pMe->pHelp)
	{
		if(ISHELL_CreateInstance(pMe->pIShell,AEECLSID_STATIC,(void**)&pMe->pHelp) != SUCCESS)
			return ;
	}
	ISTATIC_SetProperties(pMe->pHelp,ST_ICONTEXT);
	SETAEERECT(&rect,0,0,pMe->DeviceInfo.cxScreen,pMe->DeviceInfo.cyScreen);
    ISTATIC_SetRect(pMe->pHelp,&rect);

	ISHELL_LoadResString(pMe->pIShell,MYMEDIA_RES_FILE,IDS_HELP,title,sizeof(title));
	pImage = ISHELL_LoadResImage(pMe->pIShell,MYMEDIA_RES_FILE,IDB_HELP);
	ISTATIC_SetText(pMe->pHelp,title,(AECHAR*)pImage,AEE_FONT_BOLD,AEE_FONT_NORMAL);
	ISTATIC_Redraw(pMe->pHelp);
	IIMAGE_Release(pImage);
	pMe->status = STATUS_HELP;
}

// lab 2
static void MediaCallback(mymedia* pMe,AEEMediaCmdNotify *data)
{
	switch(data->nCmd)
	{
	case MM_CMD_PLAY:
		switch(data->nStatus)
		{
		case MM_STATUS_DONE:
			pMe->TickTime = 0;
			if(!pMe->flag)          //in order to play the music again
				IMEDIA_Play(pMe->pMedia);
			break;
		case MM_STATUS_TICK_UPDATE:
			pMe->TickTime++;
			break;
		case MM_STATUS_START:
		    IMEDIA_FastForward(pMe->pMedia,pMe->TickTime*1000);
			break;
		}
		break;
	default:
		break;
	}
}
// end of lab 2

static void PlayImage(mymedia* pMe)
{
	uint16        x,y;
	AEEImageInfo  ImageInfo;

	  IDISPLAY_ClearScreen(pMe->pIDisplay);

	  pMe->pImage = ISHELL_LoadResImage(pMe->pIShell,MYMEDIA_RES_FILE,IDB_DOG);
	  if(pMe->pImage)
	  {
		  IIMAGE_GetInfo(pMe->pImage,&ImageInfo);
		  x = (pMe->DeviceInfo.cxScreen - ImageInfo.cx)/2;
		  y = (pMe->DeviceInfo.cyScreen - ImageInfo.cy)/2;

		  IIMAGE_Start(pMe->pImage,x,y);
	  }

	  IDISPLAY_Update(pMe->pIDisplay);
}

// lab 2
static void PlayMusic(mymedia* pMe)
{
      AEEMediaData  music;

	  if(ISHELL_CreateInstance(pMe->pIShell,AEECLSID_MEDIAMIDI,(void**)&pMe->pMedia) != SUCCESS)
		  return ;
	  music.clsData = MMD_FILE_NAME;
	  music.pData = "sample.mid";
	  music.dwSize = 0;
	  IMEDIA_SetMediaData(pMe->pMedia,&music);
	  IMEDIA_RegisterNotify(pMe->pMedia,(PFNMEDIANOTIFY)MediaCallback,pMe);
	  IMEDIA_Play(pMe->pMedia);
}
// end of lab 2
