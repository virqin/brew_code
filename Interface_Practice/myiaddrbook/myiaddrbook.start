/*===========================================================================

FILE: myiaddrbook.c
===========================================================================*/


/*===============================================================================
INCLUDES AND VARIABLE DEFINITIONS
=============================================================================== */
#include "AEEModGen.h"          // Module interface definitions
#include "AEEAppGen.h"          // Applet interface definitions
#include "AEEShell.h"           // Shell interface definitions
#include "AEEMenu.h"
#include "AEEStdLib.h"

#include "myiaddrbook.bid"
#include "myiaddrbook_res.h"

/*-------------------------------------------------------------------
Applet structure. All variables in here are reference via "pMe->"
-------------------------------------------------------------------*/
typedef struct _myiaddrbook {
	AEEApplet      a ;	       // First element of this structure must be AEEApplet
    AEEDeviceInfo  DeviceInfo; // always have access to the hardware device information
    IDisplay      *pIDisplay;  // give a standard way to access the Display interface
    IShell        *pIShell;    // give a standard way to access the Shell interface

    // add your own variables here...
	IMenuCtl *        m_pIMenu;

} myiaddrbook;

/*-------------------------------------------------------------------
Function Prototypes
-------------------------------------------------------------------*/
static  boolean myiaddrbook_HandleEvent(myiaddrbook* pMe, AEEEvent eCode, 
                                             uint16 wParam, uint32 dwParam);
boolean myiaddrbook_InitAppData(myiaddrbook* pMe);
void    myiaddrbook_FreeAppData(myiaddrbook* pMe);

static void  myiaddrbook_ShowMenu(myiaddrbook* pMe);

/*===============================================================================
FUNCTION DEFINITIONS
=============================================================================== */

/*===========================================================================
FUNCTION: AEEClsCreateInstance
===========================================================================*/
int AEEClsCreateInstance(AEECLSID ClsId, IShell *pIShell, IModule *po, void **ppObj)
{
	*ppObj = NULL;

	if( ClsId == AEECLSID_MYIADDRBOOK )
	{
		// Create the applet and make room for the applet structure
		if( AEEApplet_New(sizeof(myiaddrbook),
                          ClsId,
                          pIShell,
                          po,
                          (IApplet**)ppObj,
                          (AEEHANDLER)myiaddrbook_HandleEvent,
                          (PFNFREEAPPDATA)myiaddrbook_FreeAppData) ) // the FreeAppData function is called after sending EVT_APP_STOP to the HandleEvent function
                          
		{
			//Initialize applet data, this is called before sending EVT_APP_START
            // to the HandleEvent function
			if(myiaddrbook_InitAppData((myiaddrbook*)*ppObj))
			{
				//Data initialized successfully
				return(AEE_SUCCESS);
			}
			else
			{
				//Release the applet. This will free the memory allocated for the applet when
				// AEEApplet_New was called.
				IAPPLET_Release((IApplet*)*ppObj);
				return EFAILED;
			}

        } // end AEEApplet_New

    }

	return(EFAILED);
}


/*===========================================================================
FUNCTION SampleAppWizard_HandleEvent
===========================================================================*/
static boolean myiaddrbook_HandleEvent(myiaddrbook* pMe, AEEEvent eCode, uint16 wParam, uint32 dwParam)
{  
	AECHAR szText[64];
    switch (eCode) 
	{
        // App is told it is starting up
        case EVT_APP_START:                        
		    // Add your code here...
			myiaddrbook_ShowMenu(pMe);
            return(TRUE);


        // App is told it is exiting
        case EVT_APP_STOP:
            // Add your code here...

      		return(TRUE);


        // App is being suspended 
        case EVT_APP_SUSPEND:
		    // Add your code here...

      		return(TRUE);


        // App is being resumed
        case EVT_APP_RESUME:
		    // Add your code here...

      		return(TRUE);


        // An SMS message has arrived for this app. Message is in the dwParam above as (char *)
        // sender simply uses this format "//BREW:ClassId:Message", example //BREW:0x00000001:Hello World
        case EVT_APP_MESSAGE:
		    // Add your code here...

      		return(TRUE);

        // A key was pressed. Look at the wParam above to see which key was pressed. The key
        // codes are in AEEVCodes.h. Example "AVK_1" means that the "1" key was pressed.
        case EVT_KEY:
		    // Add your code here...
	if( pMe->m_pIMenu )
		{
			if( IMENUCTL_HandleEvent(pMe->m_pIMenu, EVT_KEY, wParam, dwParam) )
				return TRUE;
			else      return FALSE; 
		}else if(wParam ==AVK_CLR){

			myiaddrbook_ShowMenu(pMe);
		}
		return TRUE;
		
	case EVT_COMMAND:
		if( pMe->m_pIMenu )
		{
			switch(IMENUCTL_GetSel(pMe->m_pIMenu))
			{
			case IDS_ADD_REC:	
				break;
			case IDS_ADD_FIELD:			
				break;
			case IDS_UPDATE_FIELD:	
				break;
			case IDS_DEL_FIELD:					
			 break;
			case IDS_ENUM_FIELDS:		
				break;
			case IDS_ENUM_CAT:
					break;
			case IDS_DEL_REC:	
				break;
			}
				IMENUCTL_Release(pMe->m_pIMenu);
				pMe->m_pIMenu = NULL;

		}
		break;

        // If nothing fits up to this point then we'll just break out
        default:
            break;
   }

   return FALSE;
}


// this function is called when your application is starting up
boolean myiaddrbook_InitAppData(myiaddrbook* pMe)
{
    // Get the device information for this handset.
    // Reference all the data by looking at the pMe->DeviceInfo structure
    // Check the API reference guide for all the handy device info you can get
    pMe->DeviceInfo.wStructSize = sizeof(pMe->DeviceInfo);
    ISHELL_GetDeviceInfo(pMe->a.m_pIShell,&pMe->DeviceInfo);

    // The display and shell interfaces are always created by
    // default, so we'll asign them so that you can access
    // them via the standard "pMe->" without the "a."
    pMe->pIDisplay = pMe->a.m_pIDisplay;
    pMe->pIShell   = pMe->a.m_pIShell;

    // Insert your code here for initializing or allocating resources...

	if( ISHELL_CreateInstance(pMe->pIShell, AEECLSID_MENUCTL, (void **)&pMe->m_pIMenu) !=SUCCESS)
	{
		IMENUCTL_Release( pMe->m_pIMenu );
		return EFAILED;
	}

    // if there have been no failures up to this point then return success
    return TRUE;
}

// this function is called when your application is exiting
void myiaddrbook_FreeAppData(myiaddrbook* pMe)
{
    // insert your code here for freeing any resources you have allocated...

    // example to use for releasing each interface:
	if( pMe->m_pIMenu )
	{
		IMENUCTL_Release(pMe->m_pIMenu);
		pMe->m_pIMenu = NULL;
	}
}
static void  myiaddrbook_ShowMenu(myiaddrbook* pMe)
{
	CtlAddItem  ai;
	if (! pMe->m_pIMenu)
		ISHELL_CreateInstance(pMe->pIShell, AEECLSID_MENUCTL, (void **)&pMe->m_pIMenu) ;
	
	ai.pText = NULL;
	ai.pImage = NULL;
	ai.pszResImage = MYIADDRBOOK_RES_FILE;
	ai.pszResText = MYIADDRBOOK_RES_FILE;
	ai.wFont = AEE_FONT_NORMAL;
	ai.dwData = NULL;
	
	ai.wText = IDS_ADD_REC;   
	ai.wImage = IDB_MENU;
	ai.wItemID = IDS_ADD_REC;
	
	
	// Add the item to the menu control
	if(IMENUCTL_AddItemEx(pMe->m_pIMenu, &ai )==FALSE)
	{
		IMENUCTL_Release(pMe->m_pIMenu);
		return;
	}
	
	ai.wText = IDS_ADD_FIELD;
	ai.wItemID = IDS_ADD_FIELD;
	
	// Add the item to the menu control
	IMENUCTL_AddItemEx( pMe->m_pIMenu, &ai );
	
	ai.wText = IDS_UPDATE_FIELD;
	ai.wItemID = IDS_UPDATE_FIELD;
	
	// Add the item to the menu control
	IMENUCTL_AddItemEx( pMe->m_pIMenu, &ai );
	ai.wText = IDS_DEL_FIELD;
	ai.wItemID = IDS_DEL_FIELD;
	
	// Add the item to the menu control
	IMENUCTL_AddItemEx( pMe->m_pIMenu, &ai );
	
	ai.wText = IDS_ENUM_FIELDS;
	ai.wItemID = IDS_ENUM_FIELDS;
	
	// Add the item to the menu control
	IMENUCTL_AddItemEx( pMe->m_pIMenu, &ai );
		ai.wText = IDS_ENUM_CAT;
	ai.wItemID = IDS_ENUM_CAT;
	
	// Add the item to the menu control
	IMENUCTL_AddItemEx( pMe->m_pIMenu, &ai );

		ai.wText = IDS_DEL_REC;
	ai.wItemID = IDS_DEL_REC;
	
	// Add the item to the menu control
	IMENUCTL_AddItemEx( pMe->m_pIMenu, &ai );
	IMENUCTL_SetActive(pMe->m_pIMenu,TRUE);
}
